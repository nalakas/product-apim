package org.wso2.am.scenario.tests.token.oauth2;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.json.JSONObject;
import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import org.wso2.am.integration.test.utils.base.APIMIntegrationConstants;
import org.wso2.am.integration.test.utils.bean.APPKeyRequestGenerator;
import org.wso2.am.integration.test.utils.bean.SubscriptionRequest;
import org.wso2.am.scenario.test.common.APIPublisherRestClient;
import org.wso2.am.scenario.test.common.APIStoreRestClient;
import org.wso2.am.scenario.test.common.ScenarioTestBase;
import org.wso2.carbon.automation.test.utils.http.client.HttpResponse;

import java.io.File;
import java.net.URL;

import static org.wso2.am.scenario.test.common.ScenarioTestUtils.readFromFile;

public class TokenGenerate extends ScenarioTestBase {

    private APIStoreRestClient apiStore;
    private static final Log log = LogFactory.getLog(TokenGenerate.class);
    private APIPublisherRestClient apiPublisher;
    private final String SUBSCRIBER_USERNAME = "3.1.1-subscriber";
    private final String SUBSCRIBER_PASSWORD = "password@123";
    private final String ADMIN_LOGIN_USERNAME = "admin";
    private final String ADMIN_PASSWORD = "admin";
    private final String API_DEVELOPER_USERNAME = "3.1.1-developer";
    private final String API_DEVELOPER_PASSWORD = "password@123";
    private final String backendEndPoint = "http://ws.cdyne.com/phoneverify/phoneverify.asmx";
    private final String TEST_API_1_NAME = "PhoneVerifyAPI-1";
    private final String TEST_API_1_VERSION = "1.0.0";
    private final String TEST_APPLICATION_NAME = "TestApp1";
    private String accessToken;
    private String consumerKey;
    private String consumerSecret;

    @BeforeClass(alwaysRun = true)
    public void init() throws Exception {

        apiStore = new APIStoreRestClient(storeURL);
        apiPublisher = new APIPublisherRestClient(publisherURL);

        createUserWithSubscriberRole(SUBSCRIBER_USERNAME, SUBSCRIBER_PASSWORD, ADMIN_LOGIN_USERNAME, ADMIN_PASSWORD);
        createUserWithPublisherAndCreatorRole(API_DEVELOPER_USERNAME, API_DEVELOPER_PASSWORD, ADMIN_LOGIN_USERNAME,
                ADMIN_PASSWORD);

        apiStore.login(SUBSCRIBER_USERNAME, SUBSCRIBER_PASSWORD);
        apiPublisher.login(API_DEVELOPER_USERNAME, API_DEVELOPER_PASSWORD);

        // create and publish sample API
        String swaggerFilePath = System.getProperty("framework.resource.location") + "swaggerFiles" + File.separator +
                "phoneverify-swagger.json";
        File swaggerFile = new File(swaggerFilePath);
        String swaggerContent = readFromFile(swaggerFile.getAbsolutePath());
        JSONObject swaggerJson = new JSONObject(swaggerContent);

        apiPublisher.developSampleAPI(swaggerJson, API_DEVELOPER_USERNAME, backendEndPoint, true, "public");
        createApplication(TEST_APPLICATION_NAME);

        // Check the visibility of the API in API store
        isAPIVisibleInStore(TEST_API_1_NAME, apiStore);

        // Add subscription to API
        SubscriptionRequest subscriptionRequest = new SubscriptionRequest(TEST_API_1_NAME, TEST_API_1_VERSION,
                API_DEVELOPER_USERNAME,
                TEST_APPLICATION_NAME, APIMIntegrationConstants.APPLICATION_TIER.UNLIMITED);
        HttpResponse addSubscriptionResponse = apiStore.subscribe(subscriptionRequest);
        verifyResponse(addSubscriptionResponse);
        if (log.isDebugEnabled()) {
            log.debug(TEST_APPLICATION_NAME + " is subscribed to " + TEST_API_1_NAME);
        }
        accessToken = generateAppKeys();
    }

    @Test(description = "4.1.1.1")
    public void TestPasswordGrantTpeOfOauth() throws Exception {

        HttpResponse tokenByPasswordGrantTypeResponse = generateAccessTokenByPasswordGrantType();
        Assert.assertEquals(200, tokenByPasswordGrantTypeResponse.getResponseCode());
        Assert.assertNotNull(new JSONObject(tokenByPasswordGrantTypeResponse.getData()).getString("access_token"),
                "Failed to generate token by password grant type");
        log.info("this is access token generated by  password grant type " + new JSONObject(tokenByPasswordGrantTypeResponse.getData()).getString("access_token"));

    }

    @Test(description = "4.1.1.2")
    public void TestClientCredentialsGrantTpeOfOauth() throws Exception {

        HttpResponse tokenByClientCredentialsGrantTypeResponse = generateAccessTokenByClientCredentialsGrantType();
        Assert.assertEquals(200, tokenByClientCredentialsGrantTypeResponse.getResponseCode());
        Assert.assertNotNull(new JSONObject(tokenByClientCredentialsGrantTypeResponse.getData()).getString("access_token"),
                "Failed to generate token by client credentials grant type");
        log.info("This is access token generated by client credentials grant type " +
                new JSONObject(tokenByClientCredentialsGrantTypeResponse.getData()).getString("access_token"));

    }

    @Test(description = "4.1.1.3")
    public void TestRefreshGrantTpeOfOauth() throws Exception {

        String refreshToken = generateRefreshTokenByPasswordGrantType();
        HttpResponse tokenByrefreshGrantTypeResponse = generateAccessTokenByRefreshGrantType(refreshToken);
        Assert.assertEquals(200, tokenByrefreshGrantTypeResponse.getResponseCode());
        Assert.assertNotNull(new JSONObject(tokenByrefreshGrantTypeResponse.getData()).getString("access_token"),
                "Failed to generate token by refresh grant type");
        log.info("This is access token generated by refresh grant type " + new JSONObject(tokenByrefreshGrantTypeResponse.getData()).getString("access_token"));
    }

    public void createApplication(String applicationName) throws Exception {

        HttpResponse addApplicationResponse = null;
        addApplicationResponse = apiStore.addApplicationWithTokenType(applicationName,
                APIMIntegrationConstants.APPLICATION_TIER.UNLIMITED, "", "description", "OAuth");
        verifyResponse(addApplicationResponse);
        if (log.isDebugEnabled()) {
            log.debug("Application - " + applicationName + "is created successfully");
        }
    }

    public String generateAppKeys() throws Exception {

        APPKeyRequestGenerator appKeyRequestGenerator = new APPKeyRequestGenerator(TEST_APPLICATION_NAME);
        HttpResponse keyGenerationResponse = null;
        keyGenerationResponse = apiStore.generateApplicationKey(appKeyRequestGenerator);
        log.info("Key generation response for application \'" + TEST_APPLICATION_NAME + "\' response data :"
                + keyGenerationResponse.getData());
        verifyResponse(keyGenerationResponse);
        JSONObject keyGenerationRespData = new JSONObject(keyGenerationResponse.getData());

        accessToken = (keyGenerationRespData.getJSONObject("data").getJSONObject("key"))
                .get("accessToken").toString();
        consumerKey = keyGenerationRespData.getJSONObject("data").getJSONObject("key").
                getString("consumerKey");

        consumerSecret = keyGenerationRespData.getJSONObject("data").getJSONObject("key").
                getString("consumerSecret");
        return accessToken;
    }

    public HttpResponse generateAccessTokenByPasswordGrantType() throws Exception {

        HttpResponse response;
        String requestBody;
        URL tokenEndpointURL = new URL(gatewayHttpsURL + "/token");
        requestBody = "grant_type=password" + "&username=" + ADMIN_LOGIN_USERNAME + "&password=" + ADMIN_PASSWORD;
        response = apiStore.generateUserAccessKey(consumerKey, consumerSecret, requestBody, tokenEndpointURL);
        return response;
    }

    public String generateRefreshTokenByPasswordGrantType() throws Exception {

        HttpResponse response;
        String requestBody;
        JSONObject accessTokenGenerationResponse;
        URL tokenEndpointURL = new URL(gatewayHttpsURL + "/token");
        requestBody = "grant_type=password" + "&username=" + ADMIN_LOGIN_USERNAME + "&password=" + ADMIN_PASSWORD;
        response = apiStore.generateUserAccessKey(consumerKey, consumerSecret, requestBody, tokenEndpointURL);
        accessTokenGenerationResponse = new JSONObject(response.getData());
        return accessTokenGenerationResponse.getString("refresh_token");
    }

    public HttpResponse generateAccessTokenByClientCredentialsGrantType() throws Exception {

        HttpResponse response;
        String requestBody;
        URL tokenEndpointURL = new URL(gatewayHttpsURL + "/token");
        requestBody = "grant_type=client_credentials";
        response = apiStore.generateUserAccessKey(consumerKey, consumerSecret, requestBody, tokenEndpointURL);
        return response;
    }

    public HttpResponse generateAccessTokenByRefreshGrantType(String token) throws Exception {

        HttpResponse response;
        String requestBody;
        URL tokenEndpointURL = new URL(gatewayHttpsURL + "/token");
        requestBody = "grant_type=refresh_token&refresh_token=" + token;
        response = apiStore.generateUserAccessKey(consumerKey, consumerSecret, requestBody, tokenEndpointURL);
        return response;
    }

    @AfterClass(alwaysRun = true)
    public void destroy() throws Exception {

        apiStore.removeApplication(TEST_APPLICATION_NAME);
        apiPublisher.deleteAPI(TEST_API_1_NAME, TEST_API_1_VERSION, API_DEVELOPER_USERNAME);
        deleteUser(SUBSCRIBER_USERNAME, ADMIN_LOGIN_USERNAME, ADMIN_PASSWORD);
        deleteUser(API_DEVELOPER_USERNAME, ADMIN_LOGIN_USERNAME, ADMIN_PASSWORD);
    }
}

